{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (5000, 50, 1)\n",
      "y_train shape: (5000, 50)\n"
     ]
    }
   ],
   "source": [
    "import msprime as msp\n",
    "L = 1_000_000\n",
    "sim = msp.simulate(sample_size=2, length=L, mutation_rate=1e-8, recombination_rate=1e-9, Ne=1e4)\n",
    "\n",
    "import numpy as np\n",
    "x = []\n",
    "y = []\n",
    "i = 0\n",
    "while i < 5000:\n",
    "    L = 1_000_000\n",
    "    sim = msp.simulate(sample_size=2, length=L, mutation_rate=1e-8, recombination_rate=1e-9, Ne=1e4)\n",
    "    positions = np.array([v.position for v in sim.variants()])\n",
    "    gaps = np.diff(positions)\n",
    "    if len(gaps) <= 100:\n",
    "        continue\n",
    "    x.append(gaps[:50])\n",
    "    y.append(gaps[50:100])\n",
    "    i += 1\n",
    "    \n",
    "x=np.array(x)\n",
    "y=np.array(y)\n",
    "x=x.reshape(5000,50,1)\n",
    "print(\"x_train shape:\",x.shape)\n",
    "print(\"y_train shape:\",y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_1 (LSTM)                (None, 128)               66560     \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 100)               12900     \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 50)                5050      \n",
      "=================================================================\n",
      "Total params: 84,510\n",
      "Trainable params: 84,510\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 23160009.1418\n",
      "Epoch 2/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 23009399.1590\n",
      "Epoch 3/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22921977.3070\n",
      "Epoch 4/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22885000.2935\n",
      "Epoch 5/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22864060.0185\n",
      "Epoch 6/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22818130.7055\n",
      "Epoch 7/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22855969.8100\n",
      "Epoch 8/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22780938.5015\n",
      "Epoch 9/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22900312.2325\n",
      "Epoch 10/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22812602.3405\n",
      "Epoch 11/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22755425.2840\n",
      "Epoch 12/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22749173.8935\n",
      "Epoch 13/50\n",
      "5000/5000 [==============================] - 11s 2ms/step - loss: 22772696.3735\n",
      "Epoch 14/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22749796.2185\n",
      "Epoch 15/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22737123.6270\n",
      "Epoch 16/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22753457.4690\n",
      "Epoch 17/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22755311.3570\n",
      "Epoch 18/50\n",
      "5000/5000 [==============================] - 11s 2ms/step - loss: 22758553.2450\n",
      "Epoch 19/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22735091.8460\n",
      "Epoch 20/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22730122.6560\n",
      "Epoch 21/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22704913.8340\n",
      "Epoch 22/50\n",
      "5000/5000 [==============================] - 11s 2ms/step - loss: 22705268.4790\n",
      "Epoch 23/50\n",
      "5000/5000 [==============================] - 11s 2ms/step - loss: 22709288.5840\n",
      "Epoch 24/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22695148.9350\n",
      "Epoch 25/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22724179.0050\n",
      "Epoch 26/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22724670.4930\n",
      "Epoch 27/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22713175.3520\n",
      "Epoch 28/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22679599.9465\n",
      "Epoch 29/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22646153.4980\n",
      "Epoch 30/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22668924.8360\n",
      "Epoch 31/50\n",
      "5000/5000 [==============================] - 11s 2ms/step - loss: 22682529.5455\n",
      "Epoch 32/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22647100.7180\n",
      "Epoch 33/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22677677.7050\n",
      "Epoch 34/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22654343.9450\n",
      "Epoch 35/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22695218.4750\n",
      "Epoch 36/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22722215.9570\n",
      "Epoch 37/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22665846.9805\n",
      "Epoch 38/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22663907.3230\n",
      "Epoch 39/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22693679.1215\n",
      "Epoch 40/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22641446.6165\n",
      "Epoch 41/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22606354.3335\n",
      "Epoch 42/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22602574.6710\n",
      "Epoch 43/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22674481.1345\n",
      "Epoch 44/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22636195.8775\n",
      "Epoch 45/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22645109.1090\n",
      "Epoch 46/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22633601.6965\n",
      "Epoch 47/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22631854.0995\n",
      "Epoch 48/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22670304.7460\n",
      "Epoch 49/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22667961.1230\n",
      "Epoch 50/50\n",
      "5000/5000 [==============================] - 10s 2ms/step - loss: 22681549.2920\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x143608fd0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import keras\n",
    "from keras import layers\n",
    "\n",
    "model = keras.models.Sequential()\n",
    "model.add(layers.LSTM(128, input_shape=(50, 1)))\n",
    "model.add(layers.Dense(100, activation='elu'))\n",
    "model.add(layers.Dense(50, activation='elu'))\n",
    "optimizer = keras.optimizers.RMSprop(lr=0.01) \n",
    "model.compile(loss='mean_squared_error', optimizer=optimizer)\n",
    "model.summary()\n",
    "\n",
    "model.fit(x,y,batch_size=10,epochs=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2602.444 , 2481.935 , 2827.6243, 2267.3484, 2612.132 , 2750.5132,\n",
       "        2516.4734, 2309.7666, 2502.5503, 2212.6587, 2631.4614, 2709.0303,\n",
       "        2514.9563, 2283.392 , 2213.087 , 2459.0796, 2377.5376, 2318.6501,\n",
       "        2645.4915, 2385.2947, 2320.7183, 2408.6013, 2592.6846, 2582.6775,\n",
       "        2269.4275, 2429.95  , 2592.3447, 2292.8389, 2187.1316, 2054.4062,\n",
       "        2442.7976, 2238.099 , 2224.913 , 2208.3086, 2041.4862, 2469.998 ,\n",
       "        2460.3833, 2205.606 , 2218.9175, 2028.2286, 1921.3918, 2399.187 ,\n",
       "        2290.785 , 2165.0027, 2313.958 , 2280.7747, 2472.3865, 2317.6614,\n",
       "        1965.2201, 2242.5232]], dtype=float32)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#After training the model, we can input one role from x and to see we we got\n",
    "sample = x[1]\n",
    "sample = sample.reshape(1,50,1)\n",
    "model.predict(sample,verbose=0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
